/*
SQLyog Ultimate v12.08 (64 bit)
MySQL - 8.0.22 : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `blog`;

/*Table structure for table `about_message` */

DROP TABLE IF EXISTS `about_message`;

CREATE TABLE `about_message` (
  `about_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci,
  `id` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

/*Data for the table `about_message` */

insert  into `about_message`(`about_content`,`id`) values ('#### ? 承蒙关注\r\n\r\n我是包子的男朋友，可以叫我泽伟\r\n\r\n是一名专攻后端的大三学生，目前在长沙腾讯实习\r\n\r\n最近痴迷于系统设计，希望你们喜欢\r\n\r\n','1');

/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `id` varchar(10) NOT NULL,
  `article_cover` text,
  `article_title` varchar(10) DEFAULT NULL,
  `is_top` varchar(2) DEFAULT NULL,
  `create_time` date DEFAULT NULL,
  `category_name` varchar(10) DEFAULT NULL,
  `article_content` text,
  `update_time` date DEFAULT NULL,
  `category_id` varchar(10) DEFAULT NULL,
  `view_count` int DEFAULT NULL,
  `like_count` int DEFAULT NULL,
  `last_article_id` varchar(10) DEFAULT NULL,
  `next_article_id` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `article` */

insert  into `article`(`id`,`article_cover`,`article_title`,`is_top`,`create_time`,`category_name`,`article_content`,`update_time`,`category_id`,`view_count`,`like_count`,`last_article_id`,`next_article_id`) values ('1','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试','1','2021-06-01','测试','\n\n# Vue实战\n\n## 1. Vue 引言\n\n\n\n```markdown\n# 渐进式\n   1. 易用  html css javascript\n   2. 高效  开发前端页面 非常高效 \n   3. 灵活  开发灵活 多样性\n\n# 总结\n		Vue 是一个javascript 框架 js 简化页面js操作\n		bootstrap 是一个css框架  封装css\n\n# 后端服务端开发人员: \n		页面标签  dom  jquery js document.getElementById(\"xxx\")\n		Vue 渐进式javascript框架: 让我们通过操作很少的DOM,甚至不需要操作页面中任何DOM元素,就很容易的完成数据和视图绑定 ====> 双向绑定 MVVM  \n		\n		注意: 日后在使用Vue过程中页面中不要在引入Jquery框架\n		\n		html css--->javascript(document.getElementById()...) -----> jquery($(\"#xx\")) \n		        ----> angularjs -----> Vue(前后端分离架构核心)\n 		Vue 前端系统     <---JSON---->  后台系统springcloud\n 		19年  full stack  全栈式开发工程师\n\n# Vue 作者\n 	尤雨溪   国内的    \n```\n\n-------\n\n## 2. Vue入门\n\n### 2.1	下载Vuejs\n\n```js\n//开发版本:\n	<!-- 开发环境版本，包含了有帮助的命令行警告 -->\n	<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n\n//生产版本:\n	<!-- 生产环境版本，优化了尺寸和速度 -->\n	<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n```\n\n### 2.2 Vue第一个入门应用\n\n```html\n<div id=\"app\">\n        {{ msg }}  {{username}} {{pwd}}\n\n        <br>\n        <span>\n            {{ username }}\n            <h1>{{ msg }}</h1>\n        </span>\n				\n   </div>\n		<!--引入vue.js-->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n        const app = new Vue({\n            el:\"#app\",  //element 用来给Vue实例定义一个作用范围\n            data:{      //用来给Vue实例定义一些相关数据\n                msg:\"百知欢迎你,期待你的加入!\",\n                username:\"hello Vue!\",\n                pwd :\"12345\",\n            },\n        });\n    </script>	\n\n    \n```\n\n```markdown\n# 总结:\n			1.vue实例(对象)中el属性: 	代表Vue的作用范围  日后在Vue的作用范围内都可以使用Vue的语法\n			2.vue实例(对象)中data属性: 用来给Vue实例绑定一些相关数据, 绑定的数据可以通过{{变量名}}在Vue作用范围内取出\n			3.在使用{{}}进行获取data中数据时,可以在{{}}中书写表达式,运算符,调用相关方法,以及逻辑运算等\n			4.el属性中可以书写任意的CSS选择器[jquery选择器],但是在使用Vue开发是推荐使用 id选择器  注意: el属性值不能指定body或html标签\n```\n\n------\n\n## 3. v-text和v-html\n\n### 3.1 v-text\n\n> `v-text`:用来获取data中数据将数据以文本的形式渲染到指定标签内部             类似于javascript 中 innerText\n\n```html\n		<div id=\"app\" class=\"aa\">\n        <span >{{ message }}</span>\n        <span v-text=\"message\"></span>\n    </div>\n\n    <!--引入vue.js-->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n        const app = new Vue({\n            el:\"#app\",\n            data:{\n                message:\"百知欢迎您\"\n            }\n        })\n    </script>\n```\n\n```markdown\n# 总结\n			1.{{}}(插值表达式)和v-text获取数据的区别在于 \n				a.使用v-text取值会将标签中原有的数据覆盖 使用插值表达式的形式不会覆盖标签原有的数据\n				b.使用v-text可以避免在网络环境较差的情况下出现插值闪烁\n```\n\n### 3.2 v-html\n\n> `v-html`:用来获取data中数据将数据中含有的html标签先解析在渲染到指定标签的内部  类似于javascript中 innerHTML\n\n```html\n<div id=\"app\" class=\"aa\">\n        <span>{{message}}</span>\n        <br>\n        <span v-text=\"message\"></span>\n\n        <br>\n        <span v-html=\"message\">xxxxxx</span>\n    </div>\n\n    <!--引入vue.js-->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n        const app = new Vue({\n            el:\"#app\",\n            data:{\n                message:\"<a href=\'\'>百知欢迎您</a>\"\n            }\n        })\n    </script>\n```\n\n----\n\n## 4.vue中事件绑定(v-on)\n\n### 4.1 绑定事件基本语法\n\n```html\n		<div id=\"app\">\n        <h2>{{message}}</h2>\n        <h2 v-text=\"message\"></h2>\n        <h2>年龄:{{ age }}</h2>\n        <br>\n        <input type=\"button\" value=\"点我改变年龄\" v-on:click=\"changeage\">\n    </div>\n    <!--引入vue.js-->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n        const app = new Vue({\n            el:\"#app\",\n            data:{\n                message:\"hello 欢迎来到百知课堂!\",\n                age:23,\n            },\n            methods:{  //methods 用来定义vue中时间\n                changeage:function(){\n                    alert(\'点击触发\');\n                }\n            }\n        })\n    </script>\n```\n\n```markdown\n# 总结:\n		事件  事件源:发生事件dom元素  事件: 发生特定的动作  click....  监听器  发生特定动作之后的事件处理程序 通常是js中函数\n		1.在vue中绑定事件是通过v-on指令来完成的 v-on:事件名 如  v-on:click\n		2.在v-on:事件名的赋值语句中是当前事件触发调用的函数名\n		3.在vue中事件的函数统一定义在Vue实例的methods属性中\n		4.在vue定义的事件中this指的就是当前的Vue实例,日后可以在事件中通过使用this获取Vue实例中相关数据\n```\n\n### 4.2 Vue中事件的简化语法\n\n```html\n		<div id=\"app\">\n        <h2>{{ age }}</h2>\n        <input type=\"button\" value=\"通过v-on事件修改年龄每次+1\" v-on:click=\"changeage\">\n        <input type=\"button\" value=\"通过@绑定时间修改年龄每次-1\" @click=\"editage\">\n    </div>\n    <!--引入vue.js-->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n        const app = new Vue({\n           el:\"#app\",  //element: 用来指定vue作用范围\n           data:{\n               age:23,\n           },    //data   : 用来定义vue实例中相关数据\n           methods:{\n               changeage:function(){\n                   this.age++;\n               },\n               editage:function(){\n                   this.age--;\n               }\n\n           }  //methods: 用来定义事件的处理函数\n        });\n    </script>\n```\n\n```markdown\n# 总结:\n			1.日后在vue中绑定事件时可以通过@符号形式 简化  v-on 的事件绑定\n```\n\n### 4.3 Vue事件函数两种写法\n\n```html\n		<div id=\"app\">\n        <span>{{count}}</span>\n        <input type=\"button\" value=\"改变count的值\" @click=\"changecount\">\n    </div>\n    <!--引入vue.js-->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n        const app = new Vue({\n           el:\"#app\",\n           data:{\n               count:1,\n           },\n           methods:{\n               /*changecount:function(){\n                   this.count++;\n               }*/\n               changecount(){\n                   this.count++;\n               }\n           }\n        });\n    </script>\n```\n\n```markdown\n# 总结:\n			1.在Vue中事件定义存在两种写法  一种是 函数名:function(){}  推荐    一种是  函数名(){} 推荐\n```\n\n### 4.4 Vue事件参数传递\n\n```html\n		<div id=\"app\">\n        <span>{{count}}</span>\n        <input type=\"button\" value=\"改变count为指定的值\" @click=\"changecount(23,\'xiaohei\')\">\n    </div>\n\n    <!--引入vue.js-->\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n    <script>\n        const app = new Vue({\n           el:\"#app\",\n           data:{\n               count:1,\n           },\n           methods:{\n               //定义changecount\n               changecount(count,name){\n                   this.count = count;\n                   alert(name);\n               }\n\n           }\n        });\n    </script>\n```\n\n```markdown\n# 总结:\n			1.在使用事件时,可以直接在事件调用出给事件进行参数传递,在事件定义出通过定义对应变量接收传递的参数\n```\n\n-----\n\n## 5.v-show v-if v-bind\n\n### 5.1 v-show\n\n> `v-show`:用来控制页面中某个标签元素是否展示        底层使用控制是 display 属性\n\n```html\n<div id=\"app\">\n    <!--\n        v-show: 用来控制标签展示还是隐藏的\n    -->\n    <h2 v-show=\"false\">百知教育欢迎你的加入!</h2>\n    <h2 v-show=\"show\">百知教育欢迎你的加入这是vue中定义变量true!</h2>\n    <input type=\"button\" value=\"展示隐藏标签\" @click=\"showmsg\">\n\n</div>\n<!--引入vue.js-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el:\"#app\",\n        data:{\n            show:false,\n        },\n        methods:{\n            //定义时间\n            showmsg(){\n               this.show =  !this.show;\n            }\n        }\n    })\n</script>\n```\n\n```markdown\n# 总结\n			1.在使用v-show时可以直接书写boolean值控制元素展示,也可以通过变量控制标签展示和隐藏\n			2.在v-show中可以通过boolean表达式控制标签的展示和隐藏\n```\n\n### 5.2 v-if \n\n> `v-if`: 用来控制页面元素是否展示                底层控制是DOM元素    操作DOM\n\n```html\n<div id=\"app\">\n    <h2 v-if=\"false\">百知教育</h2>\n    <h2 v-if=\"show\">百知教育欢迎你的加入</h2>\n</div>\n<!--引入vue.js-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el:\"#app\",\n        data:{\n            show:false\n        },\n        methods:{\n\n        }\n    });\n</script>\n```\n\n### 5.3 v-bind\n\n> `v-bind`: 用来绑定标签的属性从而通过vue动态修改标签的属性\n\n```html\n<div id=\"app\">\n    <img width=\"300\" v-bind:title=\"msg\" v-bind:class=\"{aa:showCss}\"  src=\"baizhilogo.jpg\" alt=\"\">\n</div>\n<!--引入vue.js-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n\n    const app = new Vue({\n        el:\"#app\",\n        data:{\n            msg:\"百知教育官方logo!!!!\",\n            showCss:true,\n        },\n        methods:{\n        }\n    })\n</script>\n```\n\n### 5.4 v-bind 简化写法\n\n> ​	vue为了方便我们日后绑定标签的属性提供了对属性绑定的简化写法如 `v-bind:属性名` 简化之后 `:属性名`\n\n```html\n<div id=\"app\">\n    <img width=\"300\" :title=\"msg\" :class=\"{aa:showCss}\"  :src=\"src\" alt=\"\">\n    <input type=\"button\" value=\"动态控制加入样式\" @click=\"addCss\">\n    <input type=\"button\" value=\"改变图片\" @click=\"changeSrc\">\n</div>\n<!--引入vue.js-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n\n    const app = new Vue({\n        el:\"#app\",\n        data:{\n            msg:\"百知教育官方logo!!!!\",\n            showCss:true,\n            src:\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1583490365568&di=52a82bd614cd4030f97ada9441bb2d0e&imgtype=0&src=http%3A%2F%2Fimg.kanzhun.com%2Fimages%2Flogo%2F20160714%2F820a68f65b4e4a3634085055779c000c.jpg\"\n        },\n        methods:{\n            addCss(){\n                this.showCss= !this.showCss;\n            },\n            changeSrc(){\n                this.src = \"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1925088662,1336364220&fm=26&gp=0.jpg\";\n            }\n        }\n    })\n</script>\n```\n\n--------\n\n## 6.v-for的使用\n\n> `v-for`: 作用就是用来对对象进行遍历的(数组也是对象的一种)\n\n```html\n<div id=\"app\">\n\n    <span>{{ user.name }} {{ user.age }}</span>\n    <br>\n    <!--\n       通过v-for遍历对象\n    -->\n    <span v-for=\"(value,key,index) in user\">\n        {{index}} : {{key}} : {{value}}\n    </span>\n\n    <!--\n        通过v-for遍历数组\n    -->\n    <ul>\n        <li v-for=\"a,index in arr\" >\n            {{index}} {{a}}\n        </li>\n    </ul>\n\n    <!--\n        通过v-for遍历数组中对象\n        :key 便于vue内部做重用和排序\n    -->\n    <ul>\n        <li v-for=\"user,index in users\" :key=\"user.id\">\n            {{index+1}} {{ user.name }}  === {{ user.age }} ==== {{ user.content }}\n        </li>\n    </ul>\n\n</div>\n<!--引入vue-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: \"#app\",\n        data: {\n            user:{name:\"小陈\",age:23},\n            arr:[\"北京校区\", \"天津校区\", \"河南校区\"],\n            users:[\n                {id:\"1\",name:\"xiaochen\",age:23,content:\"我曾经也是一个单纯的少年!\"},\n                {id:\"2\",name:\"小白\",age:23,content:\"我曾经是一个邪恶的少年!\"},\n            ]\n        },\n        methods: {}\n    });\n</script>\n```\n\n```markdown\n# 总结\n	1.在使用v-for的时候一定要注意加入:key 用来给vue内部提供重用和排序的唯一key \n```\n\n----\n\n## 7 .v-model 双向绑定\n\n> `v-model`: 作用用来绑定标签元素的值与vue实例对象中data数据保持一致,从而实现双向的数据绑定机制\n\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"message\">\n    <span>{{message}}</span>\n    <hr>\n    <input type=\"button\" value=\"改变Data中值\" @click=\"changeValue\">\n</div>\n<!--引入vue-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n    const app = new Vue({\n        el: \"#app\",\n        data: {\n            message:\"\"\n        },\n        methods: {\n            changeValue(){\n                this.message=\'百知教育!\';\n            }\n        }\n    });\n</script>\n```\n\n```markdown\n# 总结\n		1.使用v-model指令可以实现数据的双向绑定 \n		2.所谓双向绑定 表单中数据变化导致vue实例data数据变化   vue实例中data数据的变化导致表单中数据变化 称之为双向绑定\n\n# MVVM架构  双向绑定机制\n	Model: 数据  Vue实例中绑定数据\n	\n	VM:   ViewModel  监听器\n\n	View:  页面  页面展示的数据\n```\n\n-----\n\n## 8. 事件修饰符\n\n> `修饰符`: 作用用来和事件连用,用来决定事件触发条件或者是阻止事件的触发机制\n\n```markdown\n# 1.常用的事件修饰符\n	.stop    停止\n	.prevent 阻止\n	.self    独自\n	.once    一次\n```\n\n### 8.1 stop事件修饰符\n\n> 用来阻止事件冒泡\n\n```html\n<div id=\"app\">\n    <div class=\"aa\" @click=\"divClick\">\n        <!--用来阻止事件冒泡-->\n        <input type=\"button\" value=\"按钮\" @click.stop=\"btnClick\">\n    </div>\n</div>\n<!--引入vue-->\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n<script>\n  const app = new Vue({\n    el: \"#app\",\n    data: {},\n    methods: {\n      btnClick(){\n        alert(\'button被点击了\');\n      },\n      divClick(){\n        alert(\'div被点击了\');\n      }\n    }\n  });\n</script>\n```\n\n### 8.2 prevent 事件修饰符\n\n> 用来阻止标签的默认行为\n\n```html\n<!--用来阻止事件的默认行为-->\n<a href=\"http://www.baizhibest.com/\" @click.prevent=\"aClick\">百知教育</a>\n```\n\n### 8.3 self 事件修饰符\n\n> 用来针对于当前标签的事件触发     ===========> 只触发自己标签的上特定动作的事件     只关心自己标签上触发的事件 不监听事件冒泡\n\n```html\n<!--只触发标签自身的事件-->\n<div class=\"aa\" @click.self=\"divClick\">\n  <!--用来阻止事件冒泡-->\n  <input type=\"button\" value=\"按钮\"  @click.stop=\"btnClick\">\n  <input type=\"button\" value=\"按钮1\" @click=\"btnClick1\">\n</div>\n```\n\n### 8.4 once 事件修饰符\n\n> once 一次作用:  就是让指定事件只触发一次\n\n```html\n    <!--\n    .prevent : 用来阻止事件的默认行为\n    .once    : 用来只执行一次特定的事件\n    -->\n    <a href=\"http://www.baizhibest.com/\" @click.prevent.once=\"aClick\">百知教育</a>\n```\n\n----\n\n## 9. 按键修饰符\n\n> 作用: 用来与键盘中按键事件绑定在一起,用来修饰特定的按键事件的修饰符\n\n```markdown\n# 按键修饰符\n	.enter\n	.tab\n	.delete (捕获“删除”和“退格”键)\n	.esc\n	.space\n	.up\n	.down\n	.left\n	.right\n```\n\n### 9.1 enter 回车键\n\n> 用来在触发回车按键之后触发的事件\n\n```html\n <input type=\"text\" v-model=\"msg\" @keyup.enter=\"keyups\">\n```\n\n### 9.2 tab 键\n\n> 用来捕获到tab键执行到当前标签是才会触发\n\n```html\n<input type=\"text\" @keyup.tab=\"keytabs\">\n```\n\n----\n\n## 10. Axios 基本使用\n\n### 10.1 引言\n\n> `Axios` 是一个异步请求技术,核心作用就是用来在页面中发送异步请求,并获取对应数据在页面中渲染       页面局部更新技术  Ajax\n\n### 10.2 Axios 第一个程序\n\n中文网站:https://www.kancloud.cn/yunye/axios/234845\n\n安装: https://unpkg.com/axios/dist/axios.min.js\n\n#### 10.2.1 GET方式的请求\n\n```js\n	  //发送GET方式请求\n    axios.get(\"http://localhost:8989/user/findAll?name=xiaochen\").then(function(response){\n        console.log(response.data);\n    }).catch(function(err){\n        console.log(err);\n    });\n```\n\n#### 10.2.2 POST方式请求\n\n```javascript\n		//发送POST方式请求\n    axios.post(\"http://localhost:8989/user/save\",{\n        username:\"xiaochen\",\n        age:23,\n        email:\"xiaochen@zparkhr.com\",\n        phone:13260426185\n    }).then(function(response){\n        console.log(response.data);\n    }).catch(function(err){\n        console.log(err);\n    });\n```\n\n#### 10.2.3 axios并发请求\n\n> `并发请求`:  将多个请求在同一时刻发送到后端服务接口,最后在集中处理每个请求的响应结果\n\n```js\n //1.c\n    );//用来发送一组并发请求\n```\n\n------\n\n## 11. Vue 生命周期\n\n>  Vue 实例生命周期 ===> java 对象生命周期(初始化阶段 运行阶段  销毁阶段)    `生命周期钩子`   ====>  `生命周期函数` \n>\n>  Vue实例从创建到销毁过程中自动触发一些列函数   ====> Vue生命周期函数(钩子)\n\n![img](Vue实战.assets/lifecycle.png)\n\n```markdown\n# Vue生命周期总结\n- 1.初始化阶段\n        beforeCreate(){ //1.生命周期中第一个函数,该函数在执行时Vue实例仅仅完成了自身事件的绑定和生命周期函数的初始化工作,Vue实例中还没有 Data el methods相关属性\n        console.log(\"beforeCreate: \"+this.msg);\n        },\n        created(){ //2.生命周期中第二个函数,该函数在执行时Vue实例已经初始化了data属性和methods中相关方法\n        console.log(\"created: \"+this.msg);\n        },\n        beforeMount(){//3.生命周期中第三个函数,该函数在执行时Vue将El中指定作用范围作为模板编译\n        console.log(\"beforeMount: \"+document.getElementById(\"sp\").innerText);\n        },\n        mounted(){//4.生命周期中第四个函数,该函数在执行过程中,已经将数据渲染到界面中并且已经更新页面\n        console.log(\"Mounted: \"+document.getElementById(\"sp\").innerText);\n        }\n\n- 2.运行阶段\n        beforeUpdate(){//5.生命周期中第五个函数,该函数是data中数据发生变化时执行 这个事件执行时仅仅是Vue实例中data数据变化页面显示的依然是原始数据\n        console.log(\"beforeUpdate:\"+this.msg);\n        console.log(\"beforeUpdate:\"+document.getElementById(\"sp\").innerText);\n        },\n        updated(){    //6.生命周期中第六个函数,该函数执行时data中数据发生变化,页面中数据也发生了变化  页面中数据已经和data中数据一致\n        console.log(\"updated:\"+this.msg);\n        console.log(\"updated:\"+document.getElementById(\"sp\").innerText);\n        },\n\n- 3.销毁阶段\n        beforeDestory(){//7.生命周期第七个函数,该函数执行时,Vue中所有数据 methods componet 都没销毁\n        },\n        destoryed(){ //8.生命周期的第八个函数,该函数执行时,Vue实例彻底销毁\n        }\n        \n```\n\n----\n\n## 12. Vue中组件(component)\n\n### 12.1 组件作用\n\n组件作用: 用来减少Vue实例对象中代码量,日后在使用Vue开发过程中,可以根据 不同业务功能将页面中划分不同的多个组件,然后由多个组件去完成整个页面的布局,便于日后使用Vue进行开发时页面管理,方便开发人员维护。\n\n### 12.2 组件使用\n\n#### 12.2.1 全局组件注册\n\n> 说明:全局组件注册给Vue实例,日后可以在任意Vue实例的范围内使用该组件\n\n```js\n//1.开发全局组件\nVue.component(\'login\',{\n  template:\'<div><h1>用户登录</h1></div>\'\n});\n//2.使用全局组件  在Vue实例范围内\n<login></login>  \n```\n\n```markdown\n# 注意:\n - 1.Vue.component用来开发全局组件 参数1: 组件的名称  参数2: 组件配置{}  template:\'\'用来书写组件的html代码  template中必须有且只有一个root元素\n - 2.使用时需要在Vue的作用范围内根据组件名使用全局组件\n - 3.如果在注册组件过程中使用 驼峰命名组件的方式 在使用组件时 必须将驼峰的所有单词小写加入-线进行使用\n```\n\n#### 12.2.2 局部组件注册\n\n> 说明:通过将组件注册给对应Vue实例中一个components属性来完成组件注册,这种方式不会对Vue实例造成累加\n\n- 第一种开发方式\n\n```js\n//局部组件登录模板声明\nlet login ={   //具体局部组件名称\n  template:\'<div><h2>用户登录</h2></div>\'\n};\nconst app = new Vue({\n  el: \"#app\",\n  data: {},\n  methods: {},\n  components:{  //用来注册局部组件\n    login:login  //注册局部组件\n  }\n});\n\n//局部组件使用 在Vue实例范围内\n<login></login>\n```\n\n- 第二种开发方式\n\n```js\n//1.声明局部组件模板  template 标签 注意:在Vue实例作用范围外声明\n  <template id=\"loginTemplate\">\n      <h1>用户登录</h1>\n  </template>\n\n//2.定义变量用来保存模板配置对象\n    let login ={   //具体局部组件名称\n        template:\'#loginTemplate\'  //使用自定义template标签选择器即可\n    };\n\n//3.注册组件	\n    const app = new Vue({\n        el: \"#app\",\n        data: {},\n        methods: {},\n        components:{  //用来注册局部组件\n            login:login  //注册局部组件\n        }\n    });\n\n //4.局部组件使用 在Vue实例范围内\n	 <login></login>\n```\n\n### 12.3 Prop的使用\n\n`作用:props用来给组件传递相应静态数据或者是动态数据的`\n\n#### 12.3.1 通过在组件上声明静态数据传递给组件内部\n\n```js\n//1.声明组件模板配置对象\n    let login = {\n        template:\"<div><h1>欢迎:{{ userName }} 年龄:{{ age }}</h1></div>\",\n        props:[\'userName\',\'age\']  //props作用 用来接收使用组件时通过组件标签传递的数据\n    }\n\n//2.注册组件\n    const app = new Vue({\n        el: \"#app\",\n        data: {},\n        methods: {},\n        components:{\n            login //组件注册\n        }\n    });\n\n//3.通过组件完成数据传递\n	<login user-name=\"小陈\" age=\"23\"></login>\n```\n\n```markdown\n# 总结:\n			1.使用组件时可以在组件上定义多个属性以及对应数据\n			2.在组件内部可以使用props数组生命多个定义在组件上的属性名 日后可以在组件中通过{{ 属性名 }} 方式获取组件中属性值\n```\n\n#### 12.3.2 通过在组件上声明动态数据传递给组件内部\n\n```js\n//1.声明组件模板对象\n    const login = {\n        template:\'<div><h2>欢迎: {{ name }} 年龄:{{ age }}</h2></div>\',\n        props:[\'name\',\'age\']\n    }\n \n//2.注册局部组件\n    const app = new Vue({\n        el: \"#app\",\n        data: {\n            username:\"小陈陈\",\n            age:23\n        },\n        methods: {},\n        components:{\n            login //注册组件\n        }\n    });\n\n//3.使用组件\n	 <login :name=\"username\" :age=\"age\"></login>  //使用v-bind形式将数据绑定Vue实例中data属性,日后data属性发生变化,组件内部数据跟着变化\n```\n\n#### 12.3.3 prop的单向数据流\n\n> 单向数据流:所有的 prop 都使得其父子 prop 之间形成了一个**单向下行绑定**：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。\n\n- 所有的 prop 都使得其父子 prop 之间形成了一个**单向下行绑定**：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。\n\n\n- 额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你**不**应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。---摘自官网\n\n### 12.4 组件中定义数据和事件使用\n\n##### 1. 组件中定义属于组件的数据\n\n```js\n//组件声明的配置对象\nconst login = {\n  template:\'<div><h1>{{ msg }} 百知教育</h1><ul><li v-for=\"item,index in lists\">{{ index }}{{ item }}</li></ul></div>\',\n  data(){   //使用data函数方式定义组件的数据   在templatehtml代码中通过插值表达式直接获取\n    return {\n      msg:\"hello\",\n      lists:[\'java\',\'spring\',\'springboot\']\n    }//组件自己内部数据\n  }\n}\n```\n\n##### 2.组件中事件定义\n\n```js\n const login={\n        template:\'<div><input type=\"button\" value=\"点我触发组件中事件\" @click=\"change\"></div>\',\n        data(){\n            return {\n                name:\'小陈\'\n            };\n        },\n        methods:{\n            change(){\n                alert(this.name)\n                alert(\'触发事件\');\n            }\n        }\n    }\n```\n\n```markdown\n# 总结	\n		1.组件中定义事件和直接在Vue中定义事件基本一致 直接在组件内部对应的html代码上加入@事件名=函数名方式即可\n		2.在组件内部使用methods属性用来定义对应的事件函数即可,事件函数中this 指向的是当前组件的实例\n```\n\n### 12.5 向子组件中传递事件并在子组件中调用该事件\n\n`在子组件中调用传递过来的相关事件必须使用 this.$emit(\'函数名\') 方式调用`\n\n```js\n//1.声明组件\n    const login = {\n        template:\"<div><h1>百知教育 {{ uname }}</h1> <input type=\'button\' value=\'点我\' @click=\'change\'></div>\",\n        data(){\n            return {\n                uname:this.name\n            }\n        },\n        props:[\'name\'],\n        methods:{\n            change(){\n                //调用vue实例中函数\n                this.$emit(\'aaa\');  //调用组件传递过来的其他函数时需要使用 this.$emit(\'函数名调用\')\n            }\n        }\n    }\n    \n //2.注册组件\n    	const app = new Vue({\n        el: \"#app\",\n        data: {\n            username:\"小陈\"\n        },\n        methods: {\n            findAll(){  //一个事件函数  将这个函数传递给子组件\n                alert(\'Vue 实例中定义函数\');\n            }\n        },\n        components:{\n            login,//组件的注册\n        }\n    });\n\n//3.使用组件\n	<login  @find=\"findAll\"></login>    //=====> 在组件内部使用  this.$emit(\'find\')\n```\n\n-----\n\n## 13.Vue中路由 (Vue Router)\n\n#### 13.1 路由\n\n`路由:根据请求的路径按照一定的路由规则进行请求的转发从而帮助我们实现统一请求的管理`\n\n#### 13.2 作用\n\n>  用来在vue中实现组件之间的动态切换\n\n#### 13.3 使用路由\n\n1. ##### 引入路由\n\n   ```js\n   <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n   <script src=\"https://unpkg.com/vue-router/dist/vue-router.js\"></script>  //vue 路由js\n   ```\n\n2. ##### 创建组件对象\n\n   ```js\n   //声明组件模板\n   const login = {\n     template:\'<h1>登录</h1>\'\n   };\n   \n   const register = {\n     template:\'<h1>注册</h1>\'\n   };\n   \n   ```\n\n3. ##### 定义路由对象的规则\n\n   ```js\n    //创建路由对象\n   const router = new VueRouter({\n     routes:[\n       {path:\'/login\',component:login},   //path: 路由的路径  component:路径对应的组件\n       {path:\'/register\',component:register}\n     ]\n   });\n   ```\n\n   \n\n4. ##### 将路由对象注册到vue实例\n\n   ```js\n   const app = new Vue({\n     el: \"#app\",\n     data: {\n       username:\"小陈\",\n     },\n     methods: {},\n     router:router   //设置路由对象\n   });\n   ```\n\n   \n\n5. ##### 在页面中显示路由的组件\n\n   ```html\n   <!--显示路由的组件-->\n   <router-view></router-view>\n   ```\n\n6. ##### 根据连接切换路由\n\n   ```html\n   <a href=\"#/login\">点我登录</a>\n   <a href=\"#/register\">点我注册</a>\n   ```\n\n### 13.4 router-link使用\n\n`作用:用来替换我们在切换路由时使用a标签切换路由`\n\n`好处:就是可以自动给路由路径加入#不需要手动加入`\n\n```html\n<router-link to=\"/login\" tag=\"button\">我要登录</router-link>\n<router-link to=\"/register\" tag=\"button\">点我注册</router-link>\n```\n\n```markdown\n# 总结:\n	1.router-link 用来替换使用a标签实现路由切换 好处是不需要书写#号直接书写路由路径\n	2.router-link to属性用来书写路由路径   tag属性:用来将router-link渲染成指定的标签\n```\n\n### 13.5 默认路由\n\n`作用:用来在第一次进入界面是显示一个默认的组件`\n\n```js\nconst router = new VueRouter({\n  routes:[\n    //{ path:\'/\',component:login},\n    { path:\'/\',redirect:\'/login\'},  //redirect: 用来当访问的是默认路由 \"/\" 时 跳转到指定的路由展示  推荐使用\n    { path:\'/login\', component:login},\n    { path:\'/register\', component:register},\n  ]\n});\n```\n\n### 13.6 路由中参数传递\n\n- 第一种方式传递参数 传统方式\n\n1. 通过?号形式拼接参数\n\n   ```html\n    <router-link to=\"/login?id=21&name=zhangsan\">我要登录</router-link>\n   ```\n\n2. 组件中获取参数\n\n   ```js\n   const login = {\n     template:\'<h1>用户登录</h1>\',\n     data(){return {}},\n     methods:{},\n     created(){\n       console.log(\"=============>\"+this.$route.query.id+\"======>\"+this.$route.query.name);\n     }\n   };\n   ```\n\n- 第二种方式传递参数 restful\n\n1. 通过使用路径方式传递参数\n\n   ```js\n   <router-link to=\"/register/24/张三\">我要注册</router-link>\n   var router = new VueRouter({\n     routes:[\n       {path:\'/register/:id/:name\',component:register}   //定义路径中获取对应参数\n     ]\n   });\n   ```\n\n   \n\n2. 组件中获取参数\n\n   ```js\n   const register = {\n     template:\'<h1>用户注册{{ $route.params.name }}</h1>\',\n     created(){\n       console.log(\"注册组件中id:   \"+this.$route.params.id+this.$route.params.name);\n     }\n   };\n   ```\n\n### 13.7 嵌套路由\n\n1. ##### 声明最外层和内层路由\n\n   ```js\n   <template id=\"product\">\n       <div>\n           <h1>商品管理</h1>\n   \n           <router-link to=\"/product/add\">商品添加</router-link>\n           <router-link to=\"/product/edit\">商品编辑</router-link>\n   \n           <router-view></router-view>\n   \n       </div>\n   </template>\n   \n   //声明组件模板\n   const product={\n     template:\'#product\'\n   };\n   \n   const add = {\n     template:\'<h4>商品添加</h4>\'\n   };\n   \n   const edit = {\n     template:\'<h4>商品编辑</h4>\'\n   };\n   ```\n   \n\n   \n2. ##### 创建路由对象含有嵌套路由\n\n   ```js\n   const router = new VueRouter({\n           routes:[\n               {\n                   path:\'/product\',\n                   component:product,\n                   children:[\n                       {path:\'add\',component: add},\n                       {path:\'edit\',component: edit},\n                   ]\n               },\n           ]\n       });\n   ```\n\n   \n\n3. ##### 注册路由对象\n\n   ```js\n   const app = new Vue({\n       el: \"#app\",\n       data: {},\n       methods: {},\n       router,//定义路由对象\n   });\n   ```\n\n4. 测试路由\n\n   ```html\n   <router-link to=\"/product\">商品管理</router-link>\n   <router-view></router-view>\n   ```\n\n---\n\n## 14. Vue CLI 脚手架\n\n### 14.1 什么是CLI\n\n命令行界面（英语：command-line interface，缩写：*CLI*）是在图形用户界面得到普及之前使用最为广泛的用户界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。也有人称之为字符用户界面（CUI）\n\n### 14.2 什么是Vue CLI  <====>  (maven 项目构建工具)\n\nVue CLI 是一个基于 Vue.js 进行快速开发的完整系统。 使用Vue 脚手架之后我们开发的页面将是一个完整系统(项目)。 前端系统\n\n### 14.3 Vue CLI优势\n\n- 通过 `vue-cli` 搭建交互式的项目脚手架。       \n- 通过 `@vue/cli` + `@vue/cli-service-global` 快速开始零配置原型开发   \n- 一个运行时依赖 (`@vue/cli-service`)，该依赖：\n  - 可升级;\n  - 基于 webpack 构建，并带有合理的默认配置；   webpack 前端打包工具  index.html   vue组件  用户组件   学生组件  ..... 路由   dist目录\n  - 可以通过项目内的配置文件进行配置；      cli 项目配置文件  添加\n  - 可以通过插件进行扩展。                            cli 项目里\n- 一个丰富的官方插件集合，集成了前端生态中最好的工具。 webpack打包工具===>dist目录  nodejs 服务器(tomcat java)  热部署插件  npm包\n- 一套完全图形化的创建和管理 Vue.js 项目的用户界面\n\n### 14.4 Vue CLI安装\n\n##### 1. 环境准备\n\n```markdown\n# 1.下载nodejs\n	http://nodejs.cn/download/\n		windows系统:   .msi  安装包(exe)指定安装位置   .zip(压缩包)直接解压缩指定目录\n		mac os 系统:   .pkg  安装包格式自动配置环境变量  .tar.gz(压缩包)解压缩安装到指定名\n\n# 2.配置nodejs环境变量\n	1.windows系统:\n	 	计算上右键属性---->  高级属性 ---->环境变量 添加如下配置:\n		NODE_HOME=  nodejs安装目录\n        PATH    = xxxx;%NODE_HOME%\n    2.macos 系统\n    	推荐使用.pkg安装直接配置node环境\n\n# 3.验证nodejs环境是否成功\n	node -v \n\n# 4.npm介绍\n	node package mangager   nodejs包管理工具       前端主流技术  npm 进行统一管理\n	maven 管理java后端依赖    远程仓库(中心仓库)      阿里云镜像\n	npm   管理前端系统依赖     远程仓库(中心仓库)      配置淘宝镜像\n\n# 5.配置淘宝镜像\n	  npm config set registry https://registry.npm.taobao.org\n	  npm config get registry\n\n# 6.配置npm下载依赖位置\n	 windows:\n		npm config set cache \"D:\\nodereps\\npm-cache\"\n		npm config set prefix \"D:\\nodereps\\npm_global\"\n	 mac os:\n	 	npm config set cache \"/Users/chenyannan/dev/nodereps\"\n		npm config set prefix \"/Users/chenyannan/dev/nodereps\"\n\n# 7.验证nodejs环境配置\n	npm config ls\n    ; userconfig /Users/chenyannan/.npmrc\n    cache = \"/Users/chenyannan/dev/nodereps\"\n    prefix = \"/Users/chenyannan/dev/nodereps\"\n    registry = \"https://registry.npm.taobao.org/\"\n\n```\n\n##### 2.安装脚手架\n\n```markdown\n# 0.卸载脚手架\n	npm uninstall -g @vue/cli  //卸载3.x版本脚手架\n	npm uninstall -g vue-cli  //卸载2.x版本脚手架\n\n# 1.Vue Cli官方网站\n	https://cli.vuejs.org/zh/guide/\n\n# 2.安装vue Cli\n	npm install -g vue-cli\n\n```\n\n##### 3.第一个vue脚手架项目\n\n```markdown\n# 1.创建vue脚手架第一个项目\n	vue init webpack 项目名\n# 2.创建第一个项目\n	hello     ------------->项目名\n    -build  ------------->用来使用webpack打包使用build依赖  构建一些依赖文件\n    -config ------------->用来做整个项目配置目录   主要用来对 开发 测试 环境进行配置\n    -node_modules  ------>用来管理项目中使用依赖\n    -src					 ------>用来书写vue的源代码[重点]\n    	+assets      ------>用来存放静态资源 [重点]\n      	components   ------>用来书写Vue组件 [重点]\n      	router			 ------>用来配置项目中路由[重点]\n      	App.vue      ------>项目中根组件[重点]\n      	main.js      ------>项目中主入口[重点]\n    -static        ------>其它静态\n    -.babelrc      ------> 将es6语法转为es5运行\n    -.editorconfig ------> 项目编辑配置\n    -.gitignore    ------> git版本控制忽略文件\n    -.postcssrc.js ------> 源码相关js\n    -index.html    ------> 项目主页\n    -package.json  ------> 类似与pom.xml 依赖管理  jquery 不建议手动修改\n    -package-lock.json ----> 对package.json加锁\n    -README.md         ----> 项目说明文件\n\n# 3.如何运行在项目的根目录中执行\n	npm start 运行前端系统\n\n# 4.如何访问项目\n	http://localhost:8081    \n\n# 5.Vue Cli中项目开发方式\n	 注意: 一切皆组件   一个组件中   js代码  html代码  css样式\n	 	1. VueCli开发方式是在项目中开发一个一个组件对应一个业务功能模块,日后可以将多个组件组合到一起形成一个前端系统\n	 	2. 日后在使用vue Cli进行开发时不再书写html,编写的是一个个组件(组件后缀.vue结尾的文件),日后打包时vue cli会将组件编译成运行的html文件	  \n```\n\n##### 4.如何开发Vue脚手架\n\n`注意:在Vue cli 中一切皆组件`\n\n------\n\n## 15.在脚手架中使用axios\n\n### 15.1 安装axios\n\n```markdown\n# 1.安装axios\n	npm install axios --save\n\n# 2.配置main.js中引入axios\n	import axios from \'axios\';\n	Vue.prototype.$http=axios;\n\n# 3.使用axios\n	在需要发送异步请求的位置:this.$http.get(\"url\").then((res)=>{}) this.$http.post(\"url\").then((res)=>{})\n```\n\n---\n\n## 16.Vue Cli脚手架项目部署\n\n```markdown\n# 1.在项目根目录中执行如下命令:\n	vue run build\n	注意:vue脚手架打包的项目必须在服务器上运行不能直接双击运行\n\n# 2.打包之后当前项目中变化\n	在打包之后项目中出现dist目录,dist目录就是vue脚手架项目生产目录或者说是直接部署目录\n```\n\n----\n\n## 17.VueX 状态管理\n\n### 17.1 简介&安装\n\n```markdown\n# 1.简介\n- Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化\n\n# 2.安装vuex\n-	npm install vuex --save\n\n# 3.创建vue cli中创建store文件夹\n```\n\n![image-20201226214407298](Vue实战.assets/image-20201226214407298.png)\n\n```markdown\n# 4.在stroe中创建index.js文件\n```\n\n```javascript\nimport Vue from \'vue\'\nimport Vuex from \'vuex\'\n//1.安装vuex\nVue.use(Vuex);\n//2.创建store对象\nconst store = new Vuex.Store({\n  \n});\n//3.暴露store对象\nexport default store;\n```\n\n```markdown\n# 5.在main.js中引入stroe并注册到vue实例\n```\n\n```javascript\nimport Vue from \'vue\'\nimport App from \'./App\'\nimport router from \'./router\'\nimport store from \"./stroe\";//引入store\nVue.config.productionTip = false\n\n/* eslint-disable no-new */\nnew Vue({\n  el: \'#app\',\n  router,\n  components: { App },\n  template: \'<App/>\',\n  store,//注册状态\n})\n```\n\n### 17.2 state属性\n\n```markdown\n# 1.state属性\n- 作用: 用来全局定义一些共享的数据状态\n\n# 2.语法\n    const store = new Vuex.Store({\n    	state:{\n    		counter:0,//定义共享状态\n    	},\n    }\n\n# 3.使用\n	 {{$store.state.counter}} ===> {{this.$store.state.counter}}\n```\n\n### 17.3 mutations 属性\n\n```markdown\n# 1.mutations 属性\n- 作用: 用来定义对共享的数据修改的一系列函数\n\n# 2.语法\n    const store = new Vuex.Store({\n      state:{\n        counter:0,//定义共享状态\n      },\n      mutations:{\n        //增加\n        increment(state){\n          state.counter++\n        },\n        //减小\n        decrement(state){\n          state.counter--\n        }\n      }\n    });\n\n# 3.使用\n	this.$store.commit(\'decrement\');\n	this.$store.commit(\'increment\');\n\n# 4.mutations传递参数\n\n- a.定义带有参数的函数\n			mutations:{\n     		//addCount 参数1:state 对象 参数2:自定义参数\n     		addCount(state,counter){\n        	console.log(counter);\n        	return  state.counter += counter ;\n      	}\n    	}\n- b.调用时传递参数\n		this.$store.commit(\'addCount\',11);\n```\n\n### 17.4 getters 属性\n\n```markdown\n# 1.getters 属性\n- 官方:  允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据	\n	它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。\n- 作用: 用来定义对共享的数据的计算相关的一系列函数 相当于 computed 属性 会对结果进行缓存\n\n# 2.语法\n	  getters:{\n      //平方\n      mathSqrts(state){\n        console.log(\"--------\");\n        return state.counter*state.counter;\n      },\n      //乘以一个数字\n      mathSqrtsNumber(state,getters){\n        return getters.mathSqrts*3;\n      },\n      //传递参数\n      mathSqrtsNumbers(state,getters){\n        return function (number){\n          return  number;\n        }\n      }\n    }\n\n# 3.使用\n-		1.{{$store.getters.mathSqrts}}\n-   2.{{$store.getters.mathSqrtsNumber}}\n-   3.{{$store.getters.mathSqrtsNumbers(3)}}\n```\n\n----\n\n','2021-06-08','1',0,70,'0','2'),('10','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,5,'9','11'),('11','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,0,'10','0'),('2','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试2','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','2',0,0,'1','3'),('3','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,0,'2','4'),('4','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,0,'3','5'),('5','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,0,'4','6'),('6','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,0,'5','7'),('7','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,0,'6','8'),('8','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试2','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','2',0,0,'7','9'),('9','https://img.vilipix.com/picture/pages/regular/2021/03/24/20/03/88797782_p0_master1200.jpg','测试2','0','2021-06-04','测试','这是第二篇文章的测试，何彩是傻逼\r\n','2021-06-08','1',0,0,'8','10');

/*Table structure for table `blog_info` */

DROP TABLE IF EXISTS `blog_info`;

CREATE TABLE `blog_info` (
  `article_count` varchar(10) DEFAULT NULL,
  `category_count` varchar(10) DEFAULT NULL,
  `notice` text,
  `view_count` varchar(10) DEFAULT NULL,
  `avatar` text,
  `intro` text,
  `nickname` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `blog_info` */

insert  into `blog_info`(`article_count`,`category_count`,`notice`,`view_count`,`avatar`,`intro`,`nickname`) values ('0','0','2021,欢迎光临','0','https://get.wallhere.com/photo/2560x1600-px-cat-look-1917193.jpg','我在快节奏里慢慢来，不加入马戏团\r\n','包子博客');

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `id` varchar(10) NOT NULL,
  `avatar` text,
  `website` text,
  `nickname` varchar(10) DEFAULT NULL,
  `user_id` varchar(100) DEFAULT NULL,
  `reply_id` varchar(100) DEFAULT NULL,
  `create_time` date DEFAULT NULL,
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci,
  `article_id` varchar(10) DEFAULT NULL,
  `reply_count` int DEFAULT NULL,
  `like_count` int DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `comment` */

insert  into `comment`(`id`,`avatar`,`website`,`nickname`,`user_id`,`reply_id`,`create_time`,`comment_content`,`article_id`,`reply_count`,`like_count`) values ('1','1','1','PhilChen','1','0','2021-06-09','测试','1',1,28),('10','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('11','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('12','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('13','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('14','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('15','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('16','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('17','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('18','','','用户647657','647657','0','2021-06-12','aaa','1',0,0),('2','','','用户647657','647657','1','2021-06-12','文章回复测试','1',0,0),('3','','','用户647657','647657','0','2021-06-12','文章回复测试','1',0,0),('4','','','用户647657','647657','3','2021-06-12','评论回复测试','1',0,2),('5','','','用户647657','647657','1','2021-06-12','二级评论回复测试','1',0,0),('6','','','用户647657','647657','1','2021-06-12','aaaa','1',0,0),('7','','','用户647657','647657','3','2021-06-12','aaaa','1',0,0),('8','','','用户647657','647657','3','2021-06-12','aaaaa','1',0,0),('9','','','用户647657','647657','3','2021-06-12','aaaa','1',0,0);

/*Table structure for table `friend_link` */

DROP TABLE IF EXISTS `friend_link`;

CREATE TABLE `friend_link` (
  `link_avatar` text,
  `link_name` varchar(100) NOT NULL,
  `link_intro` text,
  PRIMARY KEY (`link_name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `friend_link` */

insert  into `friend_link`(`link_avatar`,`link_name`,`link_intro`) values ('https://www.static.talkxj.com/avatar/blogger.jpg','风丶宇的个人博客','成事在人 谋事在天'),('https://www.static.talkxj.com/avatar/blogger.jpg','风丶宇的个人博客2','成事在人 谋事在天');

/*Table structure for table `message` */

DROP TABLE IF EXISTS `message`;

CREATE TABLE `message` (
  `content` varchar(300) NOT NULL,
  PRIMARY KEY (`content`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `message` */

insert  into `message`(`content`) values ('111'),('222'),('22222222222'),('2234343'),('44545‘'),('hkhh');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
